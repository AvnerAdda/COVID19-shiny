#                  width = 330, height = "auto",
#         selectInput("select", label = "Select country",
#                     choices = unique(df_global_case['Country.Region'])),
#         uiOutput('variables')
#       )
#   )
# )
#
# server <- function(input, output, session) {
#   df_global_case2 <- reactive({
#     df_global_case2 <- (df_global_case %>% filter(Country.Region == input$select))
#     df_global_case2
#   })
#
#   filteredData <- reactive({
#     df_global_case2 <- df_global_case[,c("Province.State","Country.Region","Lat","Long",names(df_global_case[ncol(df_global_case)]))]  #%>%
#       # group_by(Country.Region, Province.State) %>%
#       # summarise_each(funs(sum))
#     colnames(df_global_case2) <- c('State','Country','Lat','Long','Cases')
#     df_global_case2
#   })
#
#   output$map <- renderLeaflet({
#     leaflet(filteredData()) %>% addTiles() %>%
#       addProviderTiles("CartoDB.DarkMatter") %>%
#       setView(100, 38, 3) %>%
#       fitBounds(~min(Long), ~min(Lat), ~max(Long), ~max(Lat))
#   })
#
#   output$value <- renderPrint({ df_global_case2() })
#
#   colorpal <- reactive({
#     colorNumeric('YlOrRd', df_global_case[ncol(df_global_case)])
#   })
#
#   output$variables = renderUI({
#     conditionalPanel(
#       condition = "all(df_global_case2()['Province.State'] == '')",
#       selectInput("select2", label = "Select region",
#                   choices = df_global_case2()['Province.State'], selected = NULL)
#     )
#   })
#
#   observe({
#     pal <- colorpal()
#     leafletProxy("map", data = filteredData()) %>%
#       clearShapes()  %>%
#       addCircles(radius = ~log10(Cases)*2*10e3,fillColor = ~pal(Cases),
#                  fillOpacity = 0.7, popup = ~paste(Country,' (', State,'): ', Cases, ' cases', sep = '')
#       )
#   })
#
#   observe({
#     proxy <- leafletProxy("map", data = filteredData())
#
#     # Remove any existing legend, and only if the legend is
#     # enabled, create a new one.
#     proxy %>% clearControls()
#     pal <- colorpal()
#     proxy %>% addLegend(position = "bottomright",
#                         pal = pal, values = ~Cases)
#   })
#
#   # observeEvent(input$mymap_marker_click, {
#   #   p <- input$mymap_marker_click  # typo was on this line
#   #   print(p)
#   # })
# }
#
# shinyApp(ui, server)
library(leaflet)
library(maps)
countries <- c("Australia", "South Africa", "India", "Mexico", "USA", "Russia")
values <- c(1,2,3,4,5,6)
bounds <- map("world", countries, fill = TRUE, plot = FALSE)
map1 <- leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data = bounds, group = "Countries",
color = "red",
weight = 2,
popup = ~names,
fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "black",
weight = 3,
bringToFront = TRUE))
map1
bounds$names
set.seed(111)
bounds$value <- sample.int(n = 1000, size = 301, replace = TRUE)
map3 <- leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data = bounds, group = "Countries",
color = "red",
weight = 2,
popup = paste("Country: ", bounds$names, "<br>",
"Value: ", bounds$value, "<br>"),
fillOpacity = 0.1,
highlightOptions = highlightOptions(color = "black",
weight = 2,
bringToFront = TRUE))
map3
bounds
bounds$value
bounds$x
bounds$names
# shinyApp(ui, server)
library(leaflet)
library(maps)
df_global_case$Country.Region
library(maps)
df_global_case$Countn
df_global_case$Country.Region
unique(df_global_case$Country.Region)
library(leaflet)
library(maps)
df_global_case$Country.Region
countries <-unique(df_global_case$Country.Region)
bounds <- map("world", countries, fill = TRUE, plot = FALSE)
bounds$value <- sample.int(n = 1000, size = 301, replace = TRUE)
map3 <- leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data = bounds, group = "Countries",
color = "red",
weight = 2,
popup = paste("Country: ", bounds$names, "<br>",
"Value: ", bounds$value, "<br>"),
fillOpacity = 0.1,
highlightOptions = highlightOptions(color = "black",
weight = 2,
bringToFront = TRUE))
map3
# library(shiny)
# library(tidyverse)
# library(shinydashboard)
# library(RCurl)
# library(leaflet)
# library(dplyr)
#
# df_global_case <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
# df_us_case <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv")
# df_us_case <- subset(df_us_case, select = -c(UID,iso2,iso3,code3,FIPS,Admin2,Combined_Key))
# df_us_case <- df_us_case %>%
#   rename(
#     Province.State = Province_State,
#     Country.Region = Country_Region,
#     Long = Long_
#   )
# df_global_case <- df_global_case[!(df_global_case$Country.Region=="US"),]
# df_global_case <- rbind(df_global_case,df_us_case)
#
# ui <- bootstrapPage(
#   div(class="outer",
#   tags$style(
#     includeCSS("styles.css"),
#   ),
#   leafletOutput("map", width = "100%", height = "100%"),
#    absolutePanel(id = "controls",class = "panel panel-default", fixed = TRUE,
#                  draggable = TRUE, top = 8, left = "auto", right = 8, bottom = "auto",
#                  width = 330, height = "auto",
#         selectInput("select", label = "Select country",
#                     choices = unique(df_global_case['Country.Region'])),
#         uiOutput('variables')
#       )
#   )
# )
#
# server <- function(input, output, session) {
#   df_global_case2 <- reactive({
#     df_global_case2 <- (df_global_case %>% filter(Country.Region == input$select))
#     df_global_case2
#   })
#
#   filteredData <- reactive({
#     df_global_case2 <- df_global_case[,c("Province.State","Country.Region","Lat","Long",names(df_global_case[ncol(df_global_case)]))]  #%>%
#       # group_by(Country.Region, Province.State) %>%
#       # summarise_each(funs(sum))
#     colnames(df_global_case2) <- c('State','Country','Lat','Long','Cases')
#     df_global_case2
#   })
#
#   output$map <- renderLeaflet({
#     leaflet(filteredData()) %>% addTiles() %>%
#       addProviderTiles("CartoDB.DarkMatter") %>%
#       setView(100, 38, 3) %>%
#       fitBounds(~min(Long), ~min(Lat), ~max(Long), ~max(Lat))
#   })
#
#   output$value <- renderPrint({ df_global_case2() })
#
#   colorpal <- reactive({
#     colorNumeric('YlOrRd', df_global_case[ncol(df_global_case)])
#   })
#
#   output$variables = renderUI({
#     conditionalPanel(
#       condition = "all(df_global_case2()['Province.State'] == '')",
#       selectInput("select2", label = "Select region",
#                   choices = df_global_case2()['Province.State'], selected = NULL)
#     )
#   })
#
#   observe({
#     pal <- colorpal()
#     leafletProxy("map", data = filteredData()) %>%
#       clearShapes()  %>%
#       addCircles(radius = ~log10(Cases)*2*10e3,fillColor = ~pal(Cases),
#                  fillOpacity = 0.7, popup = ~paste(Country,' (', State,'): ', Cases, ' cases', sep = '')
#       )
#   })
#
#   observe({
#     proxy <- leafletProxy("map", data = filteredData())
#
#     # Remove any existing legend, and only if the legend is
#     # enabled, create a new one.
#     proxy %>% clearControls()
#     pal <- colorpal()
#     proxy %>% addLegend(position = "bottomright",
#                         pal = pal, values = ~Cases)
#   })
#
#   # observeEvent(input$mymap_marker_click, {
#   #   p <- input$mymap_marker_click  # typo was on this line
#   #   print(p)
#   # })
# }
#
# shinyApp(ui, server)
library(leaflet)
library(maps)
countries <-unique(df_global_case$Country.Region)
bounds <- map("world", countries, fill = TRUE, plot = FALSE)
bounds$value <- sample.int(n = 1000, size = 301, replace = TRUE)
map3 <- leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data = bounds, group = "Countries",
color = "red",
weight = 5,
popup = paste("Country: ", bounds$names, "<br>",
"Value: ", bounds$value, "<br>"),
fillOpacity = 5,
highlightOptions = highlightOptions(color = "black",
weight = 5,
bringToFront = TRUE))
map3
map3 <- leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data = bounds, group = "Countries",
color = "red",
weight = 5,
popup = paste("Country: ", bounds$names, "<br>",
"Value: ", bounds$value, "<br>"),
fillOpacity = 0.2,
highlightOptions = highlightOptions(color = "black",
weight = 5,
bringToFront = TRUE))
map3
# library(shiny)
# library(tidyverse)
# library(shinydashboard)
# library(RCurl)
# library(leaflet)
# library(dplyr)
#
# df_global_case <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
# df_us_case <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv")
# df_us_case <- subset(df_us_case, select = -c(UID,iso2,iso3,code3,FIPS,Admin2,Combined_Key))
# df_us_case <- df_us_case %>%
#   rename(
#     Province.State = Province_State,
#     Country.Region = Country_Region,
#     Long = Long_
#   )
# df_global_case <- df_global_case[!(df_global_case$Country.Region=="US"),]
# df_global_case <- rbind(df_global_case,df_us_case)
#
# ui <- bootstrapPage(
#   div(class="outer",
#   tags$style(
#     includeCSS("styles.css"),
#   ),
#   leafletOutput("map", width = "100%", height = "100%"),
#    absolutePanel(id = "controls",class = "panel panel-default", fixed = TRUE,
#                  draggable = TRUE, top = 8, left = "auto", right = 8, bottom = "auto",
#                  width = 330, height = "auto",
#         selectInput("select", label = "Select country",
#                     choices = unique(df_global_case['Country.Region'])),
#         uiOutput('variables')
#       )
#   )
# )
#
# server <- function(input, output, session) {
#   df_global_case2 <- reactive({
#     df_global_case2 <- (df_global_case %>% filter(Country.Region == input$select))
#     df_global_case2
#   })
#
#   filteredData <- reactive({
#     df_global_case2 <- df_global_case[,c("Province.State","Country.Region","Lat","Long",names(df_global_case[ncol(df_global_case)]))]  #%>%
#       # group_by(Country.Region, Province.State) %>%
#       # summarise_each(funs(sum))
#     colnames(df_global_case2) <- c('State','Country','Lat','Long','Cases')
#     df_global_case2
#   })
#
#   output$map <- renderLeaflet({
#     leaflet(filteredData()) %>% addTiles() %>%
#       addProviderTiles("CartoDB.DarkMatter") %>%
#       setView(100, 38, 3) %>%
#       fitBounds(~min(Long), ~min(Lat), ~max(Long), ~max(Lat))
#   })
#
#   output$value <- renderPrint({ df_global_case2() })
#
#   colorpal <- reactive({
#     colorNumeric('YlOrRd', df_global_case[ncol(df_global_case)])
#   })
#
#   output$variables = renderUI({
#     conditionalPanel(
#       condition = "all(df_global_case2()['Province.State'] == '')",
#       selectInput("select2", label = "Select region",
#                   choices = df_global_case2()['Province.State'], selected = NULL)
#     )
#   })
#
#   observe({
#     pal <- colorpal()
#     leafletProxy("map", data = filteredData()) %>%
#       clearShapes()  %>%
#       addCircles(radius = ~log10(Cases)*2*10e3,fillColor = ~pal(Cases),
#                  fillOpacity = 0.7, popup = ~paste(Country,' (', State,'): ', Cases, ' cases', sep = '')
#       )
#   })
#
#   observe({
#     proxy <- leafletProxy("map", data = filteredData())
#
#     # Remove any existing legend, and only if the legend is
#     # enabled, create a new one.
#     proxy %>% clearControls()
#     pal <- colorpal()
#     proxy %>% addLegend(position = "bottomright",
#                         pal = pal, values = ~Cases)
#   })
#
#   # observeEvent(input$mymap_marker_click, {
#   #   p <- input$mymap_marker_click  # typo was on this line
#   #   print(p)
#   # })
# }
#
# shinyApp(ui, server)
library(leaflet)
library(maps)
countries <-unique(df_global_case$Country.Region)
bounds <- map("world", countries, fill = TRUE, plot = FALSE)
bounds$value <- sample.int(n = 1000, size = 301, replace = TRUE)
map3 <- leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data = bounds, group = "Countries",
color = "red",
weight = 1,
popup = paste("Country: ", bounds$names, "<br>",
"Value: ", bounds$value, "<br>"),
fillOpacity = 0.2,
highlightOptions = highlightOptions(color = "black",
weight = 5,
bringToFront = TRUE))
map3
library(leaflet)
library(maps)
countries <-unique(df_global_case$Country.Region)
bounds <- map("world", countries, fill = TRUE, plot = FALSE)
bounds$value <- sample.int(n = 1000, size = 301, replace = TRUE)
map3 <- leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data = bounds, group = "Countries",
color = "red",
weight = 1,
popup = paste("Country: ", bounds$names, "<br>",
"Value: ", bounds$value, "<br>"),
fillOpacity = 0.2,
highlightOptions = highlightOptions(color = "black",
weight = 2,
bringToFront = TRUE))
map3
df_global_case = df_global_case[,c("Province.State","Country.Region","Lat","Long",names(df_global_case[ncol(df_global_case)]))]  %>%
group_by(Country.Region, Province.State) %>%
summarise_each(funs(sum))
countries <-unique(df_global_case$Country.Region)
bounds <- map("world", countries, fill = TRUE, plot = FALSE)
df_global_case
df_global_case[ncol(df_global_case)]
countries <-unique(df_global_case$Country.Region)
bounds <- map("world", countries, fill = TRUE, plot = FALSE)
bounds$value <- df_global_case[ncol(df_global_case)]
map3 <- leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data = bounds, group = "Countries",
color = "red",
weight = 1,
popup = paste("Country: ", bounds$names, "<br>",
"Value: ", bounds$value, "<br>"),
fillOpacity = 0.2,
highlightOptions = highlightOptions(color = "black",
weight = 2,
bringToFront = TRUE))
map3
bounds$value
list(df_global_case[ncol(df_global_case)])
list(data.frame(df_global_case[ncol(df_global_case)]))
countries <-unique(df_global_case$Country.Region)
bounds <- map("world", countries, fill = TRUE, plot = FALSE)
bounds$value <- list(data.frame(df_global_case[ncol(df_global_case)]))
map3 <- leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data = bounds, group = "Countries",
color = "red",
weight = 1,
popup = paste("Country: ", bounds$names, "<br>",
"Value: ", bounds$value, "<br>"),
fillOpacity = 0.2,
highlightOptions = highlightOptions(color = "black",
weight = 2,
bringToFront = TRUE))
map3
bounds$value <- unique(df_global_case[ncol(df_global_case)])
map3 <- leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data = bounds, group = "Countries",
color = "red",
weight = 1,
popup = paste("Country: ", bounds$names, "<br>",
"Value: ", bounds$value, "<br>"),
fillOpacity = 0.2,
highlightOptions = highlightOptions(color = "black",
weight = 2,
bringToFront = TRUE))
map3
length(unique(df_global_case$Country.Region))
length( unique(df_global_case[ncol(df_global_case)]))
unique(df_global_case[ncol(df_global_case)])
typeof(df_global_case[ncol(df_global_case)])
unstack(df_global_case[ncol(df_global_case)])
unstack(df_global_case
)
bounds$value
countries
list(df_global_case[ncol(df_global_case)])
df_global_case$X4.13.20
df_global_case[ncol(df_global_case)]
names(df_global_case[ncol(df_global_case)]
)
df_global_case[names(df_global_case[ncol(df_global_case)]]
df_global_case[names(df_global_case[ncol(df_global_case)])]
df_global_case$names(df_global_case[ncol(df_global_case)])]
df_global_case$names(df_global_case[ncol(df_global_case)])
df_global_case %>% pull(names(df_global_case[ncol(df_global_case)]))
countries <-unique(df_global_case$Country.Region)
bounds <- map("world", countries, fill = TRUE, plot = FALSE)
bounds$value <- df_global_case %>% pull(names(df_global_case[ncol(df_global_case)]))
map3 <- leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data = bounds, group = "Countries",
color = "red",
weight = 1,
popup = paste("Country: ", bounds$names, "<br>",
"Value: ", bounds$value, "<br>"),
fillOpacity = 0.2,
highlightOptions = highlightOptions(color = "black",
weight = 2,
bringToFront = TRUE))
map3
pal <- colorNumeric('YlOrRd', df_global_case[ncol(df_global_case)])
countries <-unique(df_global_case$Country.Region)
bounds <- map("world", countries, fill = TRUE, plot = FALSE)
bounds$value <- df_global_case %>% pull(names(df_global_case[ncol(df_global_case)]))
map3 <- leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data = bounds, group = "Countries",
fillColor = ~pal(bounds$value),
weight = 1,
popup = paste("Country: ", bounds$names, "<br>",
"Value: ", bounds$value, "<br>"),
fillOpacity = 0.2,
highlightOptions = highlightOptions(color = "black",
weight = 2,
bringToFront = TRUE))
map3
bounds$names
df_global_case$Country.Region
df_global_case = df_global_case[,c("Province.State","Country.Region","Lat","Long",names(df_global_case[ncol(df_global_case)]))]  %>%
group_by(Country.Region, Province.State) %>%
summarise_each(funs(sum))
pal <- colorNumeric('YlOrRd', df_global_case[ncol(df_global_case)])
countries <-unique(df_global_case$Country.Region)
bounds <- map("world", countries, fill = TRUE, plot = FALSE)
bounds$value <- df_global_case %>% pull(names(df_global_case[ncol(df_global_case)]))
map3 <- leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data = bounds, group = "Countries",
fillColor = ~pal(bounds$value),
weight = 1,
popup = paste("Country: ", bounds$names, "<br>",
"Value: ", bounds$value, "<br>"),
fillOpacity = 0.2,
highlightOptions = highlightOptions(color = "black",
weight = 2,
bringToFront = TRUE))
map3
